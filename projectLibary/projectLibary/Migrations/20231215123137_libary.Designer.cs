// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projectLibary;

#nullable disable

namespace projectLibary.Migrations
{
    [DbContext(typeof(LibaryContext))]
    [Migration("20231215123137_libary")]
    partial class libary
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("projectLibary.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<decimal>("FineAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("No_BorrowedBooks")
                        .HasColumnType("int");

                    b.Property<int>("No_Late_book")
                        .HasColumnType("int");

                    b.Property<int>("No_LostBooks")
                        .HasColumnType("int");

                    b.Property<int>("No_ReturnedBooks")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("ldb_id")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("ldb_id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("projectLibary.Book", b =>
                {
                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ID_librarian")
                        .HasColumnType("int");

                    b.Property<string>("Publication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("dateBorrowing")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateRetarn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ldb_id")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ISBN");

                    b.HasIndex("ID_librarian");

                    b.HasIndex("UserId");

                    b.HasIndex("ldb_id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("projectLibary.Librarian", b =>
                {
                    b.Property<int>("ID_librarian")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_librarian"));

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserTayp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ldb_id")
                        .HasColumnType("int");

                    b.HasKey("ID_librarian");

                    b.ToTable("librarians");
                });

            modelBuilder.Entity("projectLibary.LibraryDataBase", b =>
                {
                    b.Property<int>("ldb_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ldb_id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("ID_librarian")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ldb_id");

                    b.HasIndex("ID_librarian")
                        .IsUnique()
                        .HasFilter("[ID_librarian] IS NOT NULL");

                    b.ToTable("LibraryDataBase");
                });

            modelBuilder.Entity("projectLibary.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserTayp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("projectLibary.Staff", b =>
                {
                    b.HasBaseType("projectLibary.User");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Staff");
                });

            modelBuilder.Entity("projectLibary.Studant", b =>
                {
                    b.HasBaseType("projectLibary.User");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Studant");
                });

            modelBuilder.Entity("projectLibary.Account", b =>
                {
                    b.HasOne("projectLibary.LibraryDataBase", "LibraryDataBase")
                        .WithMany("Accounts")
                        .HasForeignKey("ldb_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LibraryDataBase");
                });

            modelBuilder.Entity("projectLibary.Book", b =>
                {
                    b.HasOne("projectLibary.Librarian", "Librarian")
                        .WithMany("Books")
                        .HasForeignKey("ID_librarian")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("projectLibary.User", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("projectLibary.LibraryDataBase", "LibraryDataBase")
                        .WithMany("ListOfBooks")
                        .HasForeignKey("ldb_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Librarian");

                    b.Navigation("LibraryDataBase");

                    b.Navigation("User");
                });

            modelBuilder.Entity("projectLibary.LibraryDataBase", b =>
                {
                    b.HasOne("projectLibary.Librarian", "Librarian")
                        .WithOne("LibraryDataBase")
                        .HasForeignKey("projectLibary.LibraryDataBase", "ID_librarian");

                    b.Navigation("Librarian");
                });

            modelBuilder.Entity("projectLibary.User", b =>
                {
                    b.HasOne("projectLibary.Account", "account")
                        .WithOne("user")
                        .HasForeignKey("projectLibary.User", "AccountId");

                    b.Navigation("account");
                });

            modelBuilder.Entity("projectLibary.Account", b =>
                {
                    b.Navigation("user");
                });

            modelBuilder.Entity("projectLibary.Librarian", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("LibraryDataBase");
                });

            modelBuilder.Entity("projectLibary.LibraryDataBase", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("ListOfBooks");
                });

            modelBuilder.Entity("projectLibary.User", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
